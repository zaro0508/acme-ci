- job-template:
    name: 'gate-ceilometer-dsvm-tempest-plugin-{backend}{special}{network}{job-suffix}'
    node: ubuntu-trusty

    wrappers:
      - build-timeout:
          timeout: 130
      - timestamps

    builders:
      - link-logs
      - net-info
      - devstack-checkout
      - shell: |
          #!/bin/bash -xe
          export PYTHONUNBUFFERED=true
          export DEVSTACK_GATE_TEMPEST=1
          export DEVSTACK_GATE_TEMPEST_REGEX="^ceilometer\."
          export DEVSTACK_GATE_TEMPEST_ALL_PLUGINS=1
          export DEVSTACK_GATE_CEILOMETER_BACKEND={backend}
          export DEVSTACK_LOCAL_CONFIG="enable_plugin ceilometer git://git.openstack.org/openstack/ceilometer"
          export BRANCH_OVERRIDE={branch-override}
          if [ "$BRANCH_OVERRIDE" != "default" ] ; then
              export OVERRIDE_ZUUL_BRANCH=$BRANCH_OVERRIDE
          fi
          if [ "{backend}" = "postgresql" ] ; then
              export DEVSTACK_GATE_POSTGRES=1
          fi
          if [ "{special}" == "-identity-v3-only" ] ; then
              export DEVSTACK_LOCAL_CONFIG+=$'\n'"ENABLE_IDENTITY_V2=False"
          fi
          if [ "x{network}" = "x-neutron" ] ; then
              export DEVSTACK_GATE_NEUTRON=1
          fi
          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh

    publishers:
      - test-results
      - devstack-logs
      - console-log

- job-template:
    name: '{pipeline}-ceilometer-dsvm-functional-{backend}{special}{job-suffix}'
    node: '{node}'

    wrappers:
      - build-timeout:
          timeout: 130
      - timestamps

    builders:
      - link-logs
      - net-info
      - devstack-checkout
      - shell: |
          #!/bin/bash -xe
          export PYTHONUNBUFFERED=true
          export DEVSTACK_GATE_CEILOMETER_BACKEND={backend}
          export DEVSTACK_LOCAL_CONFIG="enable_plugin ceilometer git://git.openstack.org/openstack/ceilometer"
          export BRANCH_OVERRIDE={branch-override}
          if [ "$BRANCH_OVERRIDE" != "default" ] ; then
              export OVERRIDE_ZUUL_BRANCH=$BRANCH_OVERRIDE
          fi

          if [ "{backend}" = "postgresql" ] ; then
              export DEVSTACK_GATE_POSTGRES=1
          fi
          if [ "{special}" == "-identity-v3-only" ] ; then
              export DEVSTACK_LOCAL_CONFIG+=$'\n'"ENABLE_IDENTITY_V2=False"
          fi

          function post_test_hook {{
              # Configure and run functional tests
              $BASE/new/ceilometer/ceilometer/tests/functional/hooks/post_test_hook.sh "{backend}"
          }}
          export -f post_test_hook

          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh

    publishers:
      - test-results
      - devstack-logs
      - console-log

- job-template:
    name: '{pipeline}-ceilometerclient-dsvm-functional{special}{job-suffix}'
    node: '{node}'

    wrappers:
      - build-timeout:
          timeout: 70
      - timestamps

    builders:
      - link-logs
      - net-info
      - devstack-checkout
      - shell: |
          #!/bin/bash -xe
          export PYTHONUNBUFFERED=true
          export BRANCH_OVERRIDE={branch-override}
          export PROJECTS="openstack/python-ceilometerclient $PROJECTS"
          export DEVSTACK_PROJECT_FROM_GIT=python-ceilometerclient
          export DEVSTACK_LOCAL_CONFIG="enable_plugin ceilometer git://git.openstack.org/openstack/ceilometer"
          # NOTE(sileht): in liberty telemetry-alarming was in ceilometer code tree
          if [[ "$ZUUL_BRANCH" != "stable/liberty" ]] ; then
              export PROJECTS="openstack/aodh $PROJECTS"
              export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin aodh git://git.openstack.org/openstack/aodh"
          fi
          if [ "$BRANCH_OVERRIDE" != "default" ] ; then
              export OVERRIDE_ZUUL_BRANCH=$BRANCH_OVERRIDE
          fi
          if [ "{special}" == "-identity-v3-only" ] ; then
              export DEVSTACK_LOCAL_CONFIG+=$'\n'"ENABLE_IDENTITY_V2=False"
          fi

          function post_test_hook {{
              # Configure and run functional tests
              $BASE/new/python-ceilometerclient/ceilometerclient/tests/functional/hooks/post_test_hook.sh
          }}
          export -f post_test_hook

          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh

    publishers:
      - test-results
      - devstack-logs
      - console-log

- job-template:
    name: 'gate-telemetry-dsvm-integration-{name}-{node}'
    node: '{node}'

    wrappers:
      - build-timeout:
          timeout: 130
      - timestamps

    builders:
      - link-logs
      - net-info
      - devstack-checkout
      - shell: |
          #!/bin/bash -xe
          export PYTHONUNBUFFERED=true

          # NOTE(sileht): This job runs on Aodh, Ceilometer, and Gnocchi
          # Gnocchi uses an independent release cycle. So we map here
          # which Gnocchi version can be used with other OpenStack
          # components and the reverse.
          gnocchi_branch=
          if [ "$ZUUL_PROJECT" == "openstack/gnocchi" ]; then
              case "$ZUUL_BRANCH" in
                  "stable/1.3") export OVERRIDE_ZUUL_BRANCH=stable/liberty ;;
                  "stable/2.0"|"stable/2.1") export OVERRIDE_ZUUL_BRANCH=stable/mitaka ;;
                  "stable/2.2"|"stable/3.0") export OVERRIDE_ZUUL_BRANCH=stable/newton ;;
              esac
          else
              case "$ZUUL_BRANCH" in
                  "stable/liberty") export OVERRIDE_GNOCCHI_PROJECT_BRANCH="stable/1.3";;
                  "stable/mitaka") export OVERRIDE_GNOCCHI_PROJECT_BRANCH="stable/2.1";;
                  "stable/newton") export OVERRIDE_GNOCCHI_PROJECT_BRANCH="stable/3.0";;
              esac
          fi

          export DEVSTACK_GATE_HEAT=1
          export DEVSTACK_GATE_NEUTRON=1
          export DEVSTACK_GATE_TEMPEST=1
          export DEVSTACK_GATE_EXERCISES=0
          export DEVSTACK_GATE_INSTALL_TESTONLY=1

          export PROJECTS="openstack/ceilometer openstack/aodh openstack/gnocchi"

          export DEVSTACK_LOCAL_CONFIG="enable_plugin gnocchi git://git.openstack.org/openstack/gnocchi"
          case "$ZUUL_BRANCH" in
              stable/liberty|stable/mitaka) break;;
              stable/1.3|stable/2.0|stable/2.1|stable/2.2) break;;
              *)
                export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin panko git://git.openstack.org/openstack/panko"
                export PROJECTS="openstack/panko $PROJECTS"
                ;;
          esac
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin ceilometer git://git.openstack.org/openstack/ceilometer"
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin aodh git://git.openstack.org/openstack/aodh"

          case "$ZUUL_BRANCH" in
            stable/liberty|stable/1.3) break ;;
            *) export DEVSTACK_LOCAL_CONFIG+=$'\n'"CEILOMETER_BACKEND=gnocchi" ;;
          esac

          export DEVSTACK_LOCAL_CONFIG+=$'\n'"GNOCCHI_ARCHIVE_POLICY=high"
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"CEILOMETER_PIPELINE_INTERVAL=5"
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"GNOCCHI_STORAGE_BACKEND=file"

          export PROJECTS="openstack/{name} $PROJECTS"
          export DEVSTACK_PROJECT_FROM_GIT={name}

          function post_test_hook {{
              cd /opt/stack/new/ceilometer/ceilometer/tests/integration/hooks/
              ./post_test_hook.sh
          }}
          export -f post_test_hook

          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh

    publishers:
      - devstack-logs
      - console-log

- job-template:
    name: 'gate-oslo.messaging-telemetry-dsvm-integration-{plugin}'
    node: '{node}'

    wrappers:
      - build-timeout:
          timeout: 70
      - timestamps

    builders:
      - print-template-name:
          template-name: "{template-name}"
      - link-logs
      - net-info
      - devstack-checkout
      - shell: |
          #!/bin/bash -xe
          export PYTHONUNBUFFERED=true

          export DEVSTACK_GATE_HEAT=1
          export DEVSTACK_GATE_NEUTRON=1
          export DEVSTACK_GATE_TEMPEST=1
          export DEVSTACK_GATE_EXERCISES=0
          export DEVSTACK_GATE_INSTALL_TESTONLY=1

          export PROJECTS="openstack/ceilometer openstack/aodh openstack/gnocchi openstack/oslo.messaging openstack/devstack-plugin-{plugin}"

          export DEVSTACK_LOCAL_CONFIG="enable_plugin gnocchi git://git.openstack.org/openstack/gnocchi"
          case "$ZUUL_BRANCH" in
              stable/liberty|stable/mitaka) break;;
              stable/1.3|stable/2.0|stable/2.1|stable/2.2) break;;
              *)
                export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin panko git://git.openstack.org/openstack/panko"
                export PROJECTS="openstack/panko $PROJECTS"
          esac
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin ceilometer git://git.openstack.org/openstack/ceilometer"
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin aodh git://git.openstack.org/openstack/aodh"

          case "$ZUUL_BRANCH" in
            stable/liberty|stable/1.3) break ;;
            *) export DEVSTACK_LOCAL_CONFIG+=$'\n'"CEILOMETER_BACKEND=gnocchi" ;;
          esac

          export DEVSTACK_LOCAL_CONFIG+=$'\n'"GNOCCHI_ARCHIVE_POLICY=high"
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"CEILOMETER_PIPELINE_INTERVAL=5"
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"GNOCCHI_STORAGE_BACKEND=file"

          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin devstack-plugin-{plugin} git://git.openstack.org/openstack/devstack-plugin-{plugin}"

          export DEVSTACK_PROJECT_FROM_GIT="oslo.messaging"

          function post_test_hook {{
              cd /opt/stack/new/ceilometer/ceilometer/tests/integration/hooks/
              ./post_test_hook.sh
          }}
          export -f post_test_hook

          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh

    publishers:
      - devstack-logs
      - console-log
