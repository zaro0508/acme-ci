- job:
    name: gate-heat-templates-dsvm
    node: ubuntu-trusty

    wrappers:
      - build-timeout:
          timeout: 125
      - timestamps

    builders:
      - link-logs
      - net-info
      - devstack-checkout
      - shell: |
          #!/bin/bash -xe
          export PYTHONUNBUFFERED=true
          export OVERRIDE_ENABLED_SERVICES=key,mysql,rabbit,h-api,h-api-cfn,h-api-cw,h-eng,heat
          export DEVSTACK_GATE_TEMPEST=0
          export DEVSTACK_GATE_EXERCISES=0
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin heat git://git.openstack.org/openstack/heat"
          function post_test_hook {
              cd $BASE/new/heat-templates/tools
              ./post_test_hook.sh
          }
          export -f post_test_hook

          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh

    publishers:
      - devstack-logs
      - console-log

- job-template:
    name: '{pipeline}-heat-dsvm-functional-{engine}-{datastore}-{lbaasversion}{special}{job-suffix}'
    node: '{node}'

    wrappers:
      - build-timeout:
          timeout: 80
      - timestamps

    builders:
      - link-logs
      - net-info
      - devstack-checkout
      - shell: |
          #!/bin/bash -xe
          export PYTHONUNBUFFERED=true
          services=c-api,c-bak,c-sch,c-vol,cinder,dstat,g-api,g-reg,h-api
          services+=,h-api-cfn,h-api-cw,h-eng,heat,key,mysql,n-api,n-cond
          services+=,n-cpu,n-crt,n-sch,q-agt,q-dhcp,q-l3,q-meta,q-metering
          services+=,q-svc,rabbit,s-account,s-container,s-object,s-proxy
          services+=,ceilometer-acompute,ceilometer-acentral
          services+=,ceilometer-collector,ceilometer-api
          services+=,ceilometer-anotification
          # n-obj has been removed from mitaka
          if [[ "$ZUUL_BRANCH" == "stable/liberty" ]]; then
              services+=,n-obj,
          fi
          export HEAT_BUILD_PIP_MIRROR=True
          export DEVSTACK_GATE_NEUTRON=1
          export DEVSTACK_GATE_TEMPEST=1
          export DEVSTACK_GATE_TEMPEST_NOTESTS=1
          export DEVSTACK_GATE_EXERCISES=0
          export DEVSTACK_GATE_INSTALL_TESTONLY=1
          export KEEP_LOCALRC=1
          export DEVSTACK_LOCAL_CONFIG="enable_plugin ceilometer git://git.openstack.org/openstack/ceilometer"
          export PROJECTS="openstack/aodh $PROJECTS"
          export PROJECTS="openstack/zaqar $PROJECTS"
          export PROJECTS="openstack/python-zaqarclient $PROJECTS"
          export PROJECTS="openstack/neutron-vpnaas $PROJECTS"
          services+=,aodh-api,aodh-alarm-evaluator,aodh-alarm-notifier
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin aodh git://git.openstack.org/openstack/aodh"
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin zaqar git://git.openstack.org/openstack/zaqar"
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin neutron-vpnaas git://git.openstack.org/openstack/neutron-vpnaas"

          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin heat git://git.openstack.org/openstack/heat"

          if [ "{lbaasversion}" = "lbaasv2" ]; then
              # Enable LBaaS V2 plugin
              export PROJECTS="openstack/neutron-lbaas $PROJECTS"
              services+=",q-lbaasv2"
              export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin neutron-lbaas https://git.openstack.org/openstack/neutron-lbaas"
              export PROJECTS="openstack/barbican $PROJECTS"
              export PROJECTS="openstack/python-barbicanclient $PROJECTS"
              export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin barbican https://git.openstack.org/openstack/barbican"
              # the lbaas v2 driver choice is in the gate pre test hook
          else
              services+=",q-lbaas"
          fi

          export OVERRIDE_ENABLED_SERVICES=$services

          if [ "{datastore}" == "postgres" ] ; then
              export DEVSTACK_GATE_POSTGRES=1
          fi

          if [ "{engine}" == "orig" ] ; then
              export DISABLE_CONVERGENCE=true
          fi

          export BRANCH_OVERRIDE={branch-override}
          if [ "$BRANCH_OVERRIDE" != "default" ] ; then
              export OVERRIDE_ZUUL_BRANCH=$BRANCH_OVERRIDE
          fi
          if [ "{special}" == "-identity-v3-only" ] ; then
              export DEVSTACK_LOCAL_CONFIG="ENABLE_IDENTITY_V2=False"
          fi
          function pre_test_hook {{
              cd /opt/stack/new/heat/heat_integrationtests
              ./pre_test_hook.sh
          }}
          export -f pre_test_hook

          function post_test_hook {{
              cd /opt/stack/new/heat/heat_integrationtests
              ./post_test_hook.sh
          }}
          export -f post_test_hook

          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh

    publishers:
      - devstack-logs
      - console-log


- job-template:
    name: '{pipeline}-tempest-dsvm-heat{special}{job-suffix}'
    node: '{node}'

    wrappers:
      - build-timeout:
          timeout: 130
      - timestamps

    builders:
      - link-logs
      - net-info
      - devstack-checkout
      - shell: |
          #!/bin/bash -xe
          export PYTHONUNBUFFERED=true
          export DEVSTACK_GATE_TEMPEST=1
          export DEVSTACK_GATE_TEMPEST_REGEX="orchestration"
          export DEVSTACK_GATE_HEAT=1
          export BRANCH_OVERRIDE={branch-override}
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin heat git://git.openstack.org/openstack/heat"
          if [ "$BRANCH_OVERRIDE" != "default" ] ; then
              export OVERRIDE_ZUUL_BRANCH=$BRANCH_OVERRIDE
          fi
          if [ "{special}" == "-identity-v3-only" ] ; then
              export DEVSTACK_LOCAL_CONFIG="ENABLE_IDENTITY_V2=False"
          fi
          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh

    publishers:
      - devstack-logs
      - console-log


- job-template:
   name: '{pipeline}-heatclient-dsvm-functional{job-suffix}'
   node: '{node}'

   wrappers:
     - build-timeout:
         timeout: 70
     - timestamps

   builders:
     - link-logs
     - net-info
     - devstack-checkout
     - shell: |
         #!/bin/bash -xe
         export PYTHONUNBUFFERED=true
         export BRANCH_OVERRIDE={branch-override}
         export PROJECTS="openstack/python-heatclient $PROJECTS"
         export DEVSTACK_PROJECT_FROM_GIT=python-heatclient
         export OVERRIDE_ENABLED_SERVICES=key,mysql,rabbit,h-api,h-api-cfn,h-api-cw,h-eng,heat

         export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin heat git://git.openstack.org/openstack/heat"

         if [ "$BRANCH_OVERRIDE" != "default" ] ; then
             export OVERRIDE_ZUUL_BRANCH=$BRANCH_OVERRIDE
         fi

         function post_test_hook {{
             # Configure and run functional tests
             $BASE/new/python-heatclient/heatclient/tests/functional/hooks/post_test_hook.sh
         }}
         export -f post_test_hook

         cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
         ./safe-devstack-vm-gate-wrap.sh

   publishers:
     - test-results
     - devstack-logs
     - console-log


- job-template:
    name: '{pipeline}-grenade-dsvm-heat{job-suffix}'
    node: '{node}'

    wrappers:
      - build-timeout:
          timeout: 130
      - timestamps

    builders:
      - link-logs
      - net-info
      - devstack-checkout
      - shell: |
          #!/bin/bash -xe
          export PROJECTS="openstack-dev/grenade $PROJECTS"
          export PYTHONUNBUFFERED=true

          OVERRIDE_ENABLED_SERVICES=c-api,c-bak,c-sch,c-vol,cinder,dstat,g-api,g-reg,h-api,h-api-cfn,h-api-cw,h-eng,heat,key,mysql,n-api,n-cond,n-cpu,n-crt,n-sch,q-agt,q-dhcp,q-l3,q-meta,q-metering,q-svc,rabbit,s-account,s-container,s-object,s-proxy
          export GRENADE_PLUGINRC="enable_grenade_plugin heat https://git.openstack.org/openstack/heat"

          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin heat git://git.openstack.org/openstack/heat"

          # n-obj has been removed from mitaka
          if [[ "$ZUUL_BRANCH" == "stable/liberty" ]]; then
              OVERRIDE_ENABLED_SERVICES+=,n-obj
          fi
          export OVERRIDE_ENABLED_SERVICES

          export DEVSTACK_GATE_NEUTRON=1
          export DEVSTACK_GATE_TEMPEST=1
          export DEVSTACK_GATE_TEMPEST_REGEX='tempest.api.orchestration.*'
          export DEVSTACK_GATE_GRENADE=pullup
          export BRANCH_OVERRIDE={branch-override}
          if [ "$BRANCH_OVERRIDE" != "default" ] ; then
              export OVERRIDE_ZUUL_BRANCH=$BRANCH_OVERRIDE
          fi

          function pre_test_hook {{
              cd /opt/stack/new/heat/heat_upgradetests
              ./pre_test_hook.sh
          }}
          export -f pre_test_hook

          function post_test_hook {{
              cd /opt/stack/new/heat/heat_upgradetests
              ./post_test_hook.sh
          }}
          export -f post_test_hook

          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh

    publishers:
      - devstack-logs
      - console-log

- job-template:
    name: '{pipeline}-tempest-dsvm-heat-apache{job-suffix}'
    node: '{node}'

    wrappers:
      - build-timeout:
          timeout: 130
      - timestamps

    builders:
      - link-logs
      - net-info
      - devstack-checkout
      - shell: |
          #!/bin/bash -xe
          export PYTHONUNBUFFERED=true
          export DEVSTACK_GATE_TEMPEST=1
          export DEVSTACK_GATE_TEMPEST_REGEX="orchestration"
          export DEVSTACK_GATE_HEAT=1
          export HEAT_USE_MOD_WSGI=True
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin heat git://git.openstack.org/openstack/heat"
          export BRANCH_OVERRIDE={branch-override}
          if [ "$BRANCH_OVERRIDE" != "default" ] ; then
              export OVERRIDE_ZUUL_BRANCH=$BRANCH_OVERRIDE
          fi
          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh

    publishers:
      - devstack-logs
      - console-log
